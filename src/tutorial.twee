:: Start

<center><img data-passage="buttplug-logo" class="logo"></center>

Welcome to the Buttplug Interactive Tutorial. This tutorial will take you through the basics of getting your hardware up and running with applications that use the Buttplug Intimate Hardware Control Library, as well as showing you how to use a few different applications.

<<nobr>>
<div id="waitspinner">
<span class="spinner">
  <div class="bounce1"></div>
  <div class="bounce2"></div>
  <div class="bounce3"></div>
</span>
<span id="waitlink">Wait just a moment while we load the necessary libraries</span>
</div>
<</nobr>>

<div id="introlink" class="hide">
[[Would you like to know more about Buttplug?|Getting Started]]

[[Or are you ready to try connecting devices?|Platform Selection]]

If you're already experienced with Buttplug, [[head to the Buttplug Hub for our list of Buttplug supported applications and activities!|Hub]]
</div>
<<buttplugloaded>>
  <<addclass "#waitspinner"	"hide">>
	<<removeclass "#introlink" "hide">>
<</buttplugloaded>>

:: Getting Started

Want your sex toys to synchronize with a movie? Maybe have them controlled by video games or audio? Or do you have some ideas of your own ideal interface that you'd like to build? Buttplug can help!

This tutorial shows you how to connect to and use applications that use the Buttplug Intimate Hardware Control library. These applications can control and communicate with devices like:

* Sex Toys
* Electrostim Devices
* Health Devices (like Kegelcizers)
* Basically Anything that Vibrates (Gamepads, etc)

Here's a video from the project founder, showing a demo of the software with movie sync:

<center><iframe width="560" height="315" src="https://www.youtube.com/embed/RXD76g5fias" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></center>

We'll be running you through a demonstration of how to communicate with your toys to your computer or phone. This procedure happens in almost every application you'll use, so this is a good way to make sure things work.

We'll also let you know about other applications out there already using Buttplug, so you can use the knowledge gained here to check out those applications.

[[Let's get started!|Platform Selection]]

:: Platform Selection

First off, we're going to need to know which operating system you're running.

It looks like you're running ''$opsys''.

<<set _ospassage to $opsys + " Platform Requirements">>
If that's correct, [[we can continue.|_ospassage]]

<<linkreplace "Otherwise, click here to change platform.">>
If the above is incorrect, or if you're interested in checking out a tutorial about another operating system, use one of the links below to choose the operating system you're using.

<<nobr>>
<ul>
<<for _os range [$win7, $win10, $macos, $ios, $linux, $android, $chromeos, $otheros]>>
<li><<ossuplink _os>></li>
<</for>>
</ul>
<</nobr>>

If you don't see the platform you use here, don't worry! You can still check out the rest of this tutorial, just use the <<ossuplink $otheros>> option for now. We have a simulator that will let you see how Buttplug works with toys even if you can't use one right now.

If you are using a platform we don't currently support, [[let us know on our message board so we can get that fixed!|https://metafetish.club/t/survey-which-devices-and-operating-systems-would-you-like-to-see-supported/66]]
<</linkreplace>>
:: Windows 7/8 Platform Requirements

<<platformintro>>

At the moment, we have no way to talk to Bluetooth LE hardware on anything less than Windows 10 build 15063 or later. This means that we can only communicate with USB and Serial devices on Windows 7/8. The toy compatibility list will reflect this.

We're hoping to remedy this issue at some point, but for now, we're at least supporting what we can.

[[Now let's talk about toy support!|Toy Compatibility]]

:: Windows 10 Platform Requirements

<<platformintro>>

<center>[img[winver]]</center>

Applications using Buttplug require certain versions of Windows 10 to communicate with Bluetooth LE toys. If you run the //winver// program and check the build number, it should have an "OS Build" number of 15063 or higher. In the above image, the build number is 16299, which means we can use Buttplug applications to control bluetooth devices.
If your system has a number lower than this (say, 14393), you should upgrade your Windows 10 installation.
USB and Serial hardware should work with all versions of Windows 10.

<center>[img[btdongle]]</center>

You will also need a bluetooth adapter of some kind, either built in, or a USB dongle. If you do not have one currently, we recommend the [[Plugable USB Adapter|https://www.amazon.com/Plugable-Bluetooth-Adapter-Raspberry-Compatible/dp/B009ZIILLI]]. Most any adapter using a CSR or BCM20702 radio should work.

''Do not install the drivers that come with Bluetooth Dongles.'' Only use the drivers that Windows 10 installs automatically. Third party drivers will cause bluetooth dongles to not work with Buttplug Applications.

<<bluetoothpairing>>

[[Now let's talk about toy support!|Toy Compatibility]]

:: OS X Platform Requirements

<<platformintro>>

Not all Macs are created equal, and therefore some older Macs don't have Bluetooth LE capabilities. To check this:

* On Mac 10.11 or later
** Open the Apple Menu
** Select ''About This Mac''
** Click the ''System Report'' button
** Select Hardware -> Bluetooth
** Make sure the ''Bluetooth Low Energy Supported'' feature says ''Yes''

* On Mac 10.10 or earlier
** Open the Apple Menu
** Select ''About This Mac''
** Click the ''More Info...'' button
** Click the ''System Report'' button
** Select Hardware -> Bluetooth
** Make sure the ''LMP Version'' is ''0x6'' or higher

If your system shows the correct setting, you should be able to work with Bluetooth LE toys.

<center>[img[btdongle]]</center>

If your system does not show Bluetooth LE capabilities, you will need a bluetooth adapter. If you do not have one currently, we recommend the [[Plugable USB Adapter|https://www.amazon.com/Plugable-Bluetooth-Adapter-Raspberry-Compatible/dp/B009ZIILLI]]. Most any adapter using a CSR or BCM20702 radio should work.

<<bluetoothpairing>>

[[Now let's talk about toy support!|Toy Compatibility]]

:: Linux Platform Requirements

In order for Buttplug to communicate with Bluetooth LE toys, you will need a relatively modern kernel with ''Bluez 5.26 or higher''. Assuming you're running a major distribution and have upgraded your system sometime in the past few years, you should be ok.

<center>[img[btdongle]]</center>

You will also need a bluetooth adapter of some kind, either built in, or a USB dongle. If you do not have one currently, we recommend the [[Plugable USB Adapter|https://www.amazon.com/Plugable-Bluetooth-Adapter-Raspberry-Compatible/dp/B009ZIILLI]]. Most any adapter using a CSR or BCM20702 radio should work.

<<bluetoothpairing>>

[[Now let's talk about toy support!|Toy Compatibility]]

:: Android Platform Requirements

To run Buttplug related Applications, you will need a minimum of ''Android 6 (Marshmallow)''.

Note that Android Bluetooth radio quality also varies wildly, so some phones may keep connections better than others.

<<bluetoothpairing>>

[[Now let's talk about toy support!|Toy Compatibility]]

:: iOS Platform Requirements

We currently have no support for iOS, so we cannot control toys from iPhone/iPads/etc... This will be coming in the future.

For now, you can still run our simulator to see how the system works.

[[Now let's talk about toy support!|Toy Compatibility]]

:: ChromeOS Platform Requirements

To run Buttplug related Applications, you will need a minimum of ''ChromeOS 56''.

Most modern (2015 or later) Chromebooks should have Bluetooth LE hardware built in.

[[Now let's talk about toy support!|Toy Compatibility]]

:: Other (Not Listed) Platform Requirements

We currently have no support for your operating system.

For now, you can still run our simulator to see how the system works.

[[Now let's talk about toy support!|Toy Compatibility]]

:: Toy Compatibility

We support the following hardware on ''$opsys'':
<<nobr>>
<ul>
<<if $opsys === $otheros>>
<li>None available (see below)</li>
<</if>>
<<toycompat "XBox 360/XBox One Compatible Gamepads" `[$win7, $win10]`>>
<<toycompat "Erostek ET312B" `[$win7, $win10]`>>
<<bluetooth "Fleshlight Launch">>
<<bluetooth "Vorze A10 Cyclone">>
<<bluetooth "Lovense Toys (Max/Nora/Hush/Lush/Ambi/Edge/Domi)">>
<<bluetooth "WeVibe Toys (4/4 Plus/Ditto/Nova/Pivot/Wish/Verge/Cougar)">>
<<bluetooth "Magic Motion Toys">>
<<bluetooth "Vibratissimo Toys">>
<<bluetooth "Youcups Warrior II">>
<<bluetoothjsnolinux "MaxPro M2">>
</ul>
<</nobr>>

If you don't see the hardware you have here or it says None Available, don't worry! You can still check out the rest of this tutorial, we have a simulator that will let you see what a toy would do even if you don't have one available.

If you have hardware we don't currently support, [[let us know on our message board so we can get that fixed |https://metafetish.club/t/survey-which-devices-and-operating-systems-would-you-like-to-see-supported/66]]!

[[Let's talk about connecting to a server|Connecting to Buttplug]]!

!! Go Back to Platform Selection
If you selected the wrong platform, [[you can return to platform selection.|Platform Selection]]

:: Connecting to Buttplug [disconnect connectpassage]

Here's a list of ways you can use Buttplug on ''$opsys''.

<div id="websocketapp" class="hide">
!! Websocket Server

The websocket server application runs on your computer, and allows other applications and webpages to use Buttplug to control toys.

[[Let's get the application installed!|Windows Websocket Server Installation]]
</div>
<div id="inbrowser" class="hide">
!! In Your Browser
If you're using a browser that has WebBluetooth available, you don't need an outside application to use Buttplug. Everything you need is built into your browser.
<<if navigator.bluetooth>>
Your browser has bluetooth capabilities.
<<link "Let's get connected!">>
<!-- At this point, we can go ahead and connect locally, since that will never fail -->
<<buttplugconnectlocal>>
<<connecting>>
<<success>>
<<goto "Scan For Devices">>
<<failure>>
<</buttplugconnectlocal>>
<</link>>
<<elseif $opsys === $linux && $browser === $chrome>>
It looks like you're using Chrome on Linux, which means we're only part of the way there.

You'll need to specifically enable Bluetooth on Chrome in Linux.

* Open a new tab and go to chrome://flags
* Enable "Experimental Web Platform Features"

Once you've done that, reload this page, and it should show that you have bluetooth capabilities.
<<else>>
It looks like you're running a browser that doesn't have WebBluetooth capabilities, which means we can't use it control hardware.
The only browser that currently supports WebBluetooth is [[Google Chrome|https://google.com/chrome]] Version 56 or higher on macOS, Linux, Android, or iOS. We hope this capability will be coming to Firefox in the nearish future.

If you'd like to continue the tutorial, check out the "Simulator" section below.
Otherwise, you can [[go back to the platform selection screen|Platform Selection]], or <<link "Restart the tutorial">><<reset>><</link>>.
<</if>>
</div>
<div id="mobile" class="hide">
!! Mobile App
If you're on iOS or Android, we have a mobile app available! Or at least, we will. Someday. This space will have more information about that once it's actually a thing.
</div>\
<div>
!! Simulator
Don't have a device handy, or on a platform we don't have hardware access on yet, but just want to see how things work?
You can use our simulator to visualize how toys will move, without having to worry about hooking things up!
[[Let's check out the Simulator!|Simulator]]
</div>
<div>
!! Go Back to Platform Selection
If you selected the wrong platform, [[you can return to platform selection.|Platform Selection]]
</div>

:: Windows Websocket Server Installation

<<videolink "If you would like a video example for this step, click here." "buttplug-win-install.mp4">>

To install the Websocket Server, you'll need to get the installer.

[[The installer is available on github.|https://github.com/metafetish/buttplug-csharp/releases]]

Once you've got that downloaded and installed, [[we can move on to trying to connect.|Websocket Browser Connection]]

:: Websocket Browser Connection

<<if platform.name === "Firefox">>
<<videolink "If you would like a video example for this step, click here." "buttplug-win-firefox-cert.mp4">>
<<else>>
<<videolink "If you would like a video example for this step, click here." "buttplug-win-chrome-cert.mp4">>
<</if>>

Now then, go to the start menu, and start the Websocket Server.

Make sure that the "SSL/TLS" box is checked.

Assuming you're running your web browser on the same machine as the Buttplug Server, you shouldn't need to change the host address. However, if you're running your browser on one machine and the server on another, change the value below to use the address of the server.

Host Address: <<set _hostaddrlink to '"""' + $hostaddr + '"""'>><<linkreplace "_hostaddrlink (Click to Change)">><<textbox "$hostaddr" $hostaddr autofocus>><</linkreplace>>

<div id="initialconnect">
<<link "Click here to try to connect">><<wsconnect>><<addclass "#initialconnect" "hide">><</link>>
</div>

<div id="connector" class="hide">
Trying to connect, just a second...
</div>

<div id="success" class="hide">
Great, you've connected!

[[Now we can scan for devices.|Scan For Devices]]
</div>

<div id="failure" class="hide">
The connection failed. If you look at the server dialog, you may see something like this:
This means we need to set up the self-signed security certificate in your browser.
To do this, we'll need to visit the websocket server, then accept the certificate.

<<nobr>>
<<link "Click here to open a new tab and accept the certificate.">>
<<script>>
window.open(State.variables.hostaddr.replace("wss://", "https://"), '_blank').focus();
<</script>>
<</link>>
<</nobr>>

Once that's done, <<link "Click here to try to connecting again.">><<wsconnect>><</link>>
</div>

:: Simulator

The Buttplug Device Simulator allows you to use simulated devices instead of real ones, so you can at least see what Buttplug would do if actual hardware were available.

On the side menu of this tutorial, select the "Show Device Panel" option, or else <<link "just click here">><<buttplugdevtoolsshowdevicepanel>><</link>>. This will bring up a floating panel that shows test devices. These devices can be connected to and will send/receive commands like an actual hardware device. They will also animate based on the commands sent to them.

The panel can be moved around like a desktop window, so you can move it out of the way of the text it's probably over right now by dragging the "Test Device Manager" title bar around.

You'll want to leave the device panel in view for the rest of the tutorial. If you close it, you can just reopen it using the side menu.

[[Let's scan for devices.|Scan For Devices]]
<<set $simulator to true>>
<<buttplugconnectdevtools>>
<<connecting>>
<<success>>
<<failure>>
<</buttplugconnectdevtools>>

:: Scan For Devices [connect devicescanpassage]
Let's see what devices we can discover.

If you're going to try this with a bluetooth device, turn it on now and put it close by.

<div id="startscanning">
<<link "Click here to start scanning">>
<<buttplugstartscanning>>
<<addclass "#startscanning" "hide">>
<<removeclass "#stopscanning" "hide">>
<</link>>
</div>
<div id="stopscanning" class="hide">
<<link "Click here to stop scanning">>
<<buttplugstopscanning>>
<<addclass "#stopscanning" "hide">>
<<removeclass "#startscanning" "hide">>
<</link>>
</div>
<div id="devicediv" class="hide">
<b>Devices Found:</b>
<ul id="devicelist">
<<if setup.bpClient.Devices.length > 0>>
<<removeclass "#devicediv" "hide">>
<<removeclass "#devicefound" "hide">>
<<for _device range setup.bpClient.Devices>>
<li>_device.Name</li>
<</for>>
<</if>>
</ul>
</div>
<<if $scaneventinitialized === false>>
<<buttplugdeviceaddedhandler>>
<<removeclass "#devicediv" "hide">>
<<removeclass "#devicefound" "hide">>
<<append "#devicelist">><li>_device.Name</li><</append>>
<</buttplugdeviceaddedhandler>>
<<buttplugscanningfinishedhandler>>
<<addclass "#stopscanning" "hide">>
<<removeclass "#startscanning" "hide">>
<</buttplugscanningfinishedhandler>>
<</if>>

<div id="devicefound" class="hide">
Now that we've found some devices, [[let's send them some commands|Test Devices]].
</div>

:: Test Devices [connect]

Below is a list of your currently connected devices, along with various actions they can run. If you click the link, the device will perform the specified action. Give it a shot!

<<nobr>>
<ul>
<<for _device range setup.bpClient.Devices>>
<<capture _device>>
<li>_device.name</li>
<ul>
<<for _msg range _device.AllowedMessages>>
<<if _msg eq "SingleMotorVibrateCmd">>
  <li>
  <<link "Click here to Vibrate for 1 second">>
  <<buttplugsinglemotorvibrate _device 1.0>><</buttplugsinglemotorvibrate>>
  <<timed 1s>>
    <<buttplugsinglemotorvibrate _device 0.0>><</buttplugsinglemotorvibrate>>
  <</timed>>
  <</link>>
  </li>
<</if>>
<<if _msg eq "FleshlightLaunchFW12Cmd">>
  <li>
  <<link "Click here to move back and forth once">>
  <<buttplugfleshlightlaunchfw12 _device 60 20>><</buttplugfleshlightlaunchfw12>>
  <<timed 1s>>
    <<buttplugfleshlightlaunchfw12 _device 60 80>><</buttplugfleshlightlaunchfw12>>
    <<next>><<buttplugfleshlightlaunchfw12 _device 60 20>><</buttplugfleshlightlaunchfw12>>
  <</timed>>
  <</link>>
  </li>
<</if>>
<</for>>
</ul>
<</capture>>
<</for>>
</ul>
<</nobr>>

Once you're done playing with that, [[let's go to the hub and see what else there is to do!|Hub]]

:: Hub

! The Buttplug Hub

What would you like to do?

* [[Test more devices in Playground|Playground]]
* [[Play or encode movies with hardware synchronization|Movie Players]]
* [[Use toys and hardware with video games|Video Games]]
* [[Write your own Buttplug Programs|Development]]

* <<link "Restart the Tutorial">><<reset>><</link>>

:: Playground

[[Buttplug Playground|https://buttplug.world/playground]] is a simple test application that allows you to manually control different types of toys. It's a great way to test out what you've got, or if you're on a phone or tablet, get a quick and easy touch control interface for toys!

[[Head back to The Buttplug Hub|Hub]]

:: Movie Players

There are multiple choices for playing movies and synchronizing them with hardware.

* [[Syncydink|https://buttplug.world/syncydink]] (All platforms) - a web-based hardware synced movie player.
* [[ScriptPlayer|https://github.com/FredTungsten/ScriptPlayer]] (Windows only) - Native Movie Player with hardware sync capabilities.

If you'd like to encode movies, check out these choices:

* [[Funscripting|https://github.com/funjack/funscripting]] - Blender addon for encoding movies using the Funscript format (supported by Syncydink and ScriptPlayer)

[[Head back to The Buttplug Hub|Hub]]

:: Video Games

* [[Buttplug Game Vibration Router|Game Vibration Router]]

[[Head back to The Buttplug Hub|Hub]]

:: Development

* [[Buttplug Protocol Documentation|https://metafetish.github.io/buttplug]]
* [[Buttplug Developer Guide|https://metafetish.github.io/buttplug-developer-guide]]
* [[Buttplug STPIHKAL|https://metafetish.github.io/stpihkal]]

* Glitch Tutorials

* Example Repos

[[Head back to The Buttplug Hub|Hub]]

:: Game Vibration Router

[[Head back to The Buttplug Hub|Hub]]